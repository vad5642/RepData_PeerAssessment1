install.packages("swirl")
library("swirl")
?InstallCourses
install_from_swirl("R Programming", dev = FALSE, mirror = "github")
x<- c(TRUE, 3.4)
x
x<- c("TRUE:", 3.4)
x
x <- 1:10
x
x+0.1
x
x/3
(x/3).as.integer
as.integer(x/3)
x/3L
as.character(x/3)
x <- c(2, 3L, 3+9i, "fgh")
x
x <- list(2, 3L, 3+9i, "fgh")
x
class(x[4])
class(x[[4]])
x[[4]]
x[[4]][3]
x[[4]][1]
x[[4]][0]
x[[1]][0]
x <- c(2, 3)
y <- c(20,30)
cbind(x,y)
rbind(x,y)
x.add
x.attributes
x.attributes()
x <- c(x, 4)
x
rbind(x,y)
x <- factor(c("q", "w", "q", "q", "w"), labels=vector("f", "w", "e"))
x <- factor(c("q", "w", "q", "q", "w"), labels=vector("f", "w"))
x <- factor(c("q", "w", "q", "q", "w"), labels=c("f", "w", "e"))
x <- factor(c("q", "w", "q", "q", "w"), lavels=c("f", "w", "e"))
x <- factor(c("q", "w", "q", "q", "w"), levels=c("f", "w", "e"))
x
x <- factor(c("q", "w", "q", "q", "w"), levels=c("f", "w", "q"))
x
table(x)
x[3]
x <- list(a=1, b= 2, c=3)
x
x$a
x$b
x <- c(1,2,3,4)
names(x)
names(x) <- c("q","w","e","r")
x$w
names(x)
x
x["w"]
swirl("R Programming")
library(swirl)
rm(list=ls())
ls()
library(swirl)
swirl("R Programming")
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div(z/my_sqrt)
my_div <- (z/my_sqrt)
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
library("swirl")
swirl()
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq = seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.my_seq)
seq(along.with = my_seq)
seq_along() my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5, 55, -10, 6)
num_vect <-c(0.5, 55, -10, 6)
num_vect_1<- num_vect[num_vect < 1]
num_vect_1<- num_vect < 1
tf<- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "vad5642")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep="")
(LETTERS, 1:4, sep = "-")
paste(LETTERS, 1:4, sep = "-")
c(44, NA, 5, NA)->x
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, -10)]
x[c(-2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
manes(vect)
names(vect)
vect2 <- c(11, 2, NA)
manes(vect2) <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(nrow=4, ncol=5) -> my_matrix2
matrix(data = 1:20, nrow=4, ncol=5) -> my_matrix2
identical(my_matrix, my_matrix2)
patients = c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
2==2
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |c(TRUE, FALSE, FALSE)
TRUE ||c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(inys<0)
any(ints<0)
all(ints>0)
?pnorm
pnorm(70,80,10)
qnorm(0.95,1100,75)
qnorm(95,1100,75)
qnorm(0.95,1100,75)
qnorm(0.95,1100,75/sqrt(100))
qnorm(0.95,1100,75/(100))
?rbinom
pbinom(0.8, 5)
pbinom(0.8, 5, o.5)
pbinom(0.8, 5, 0.5)
pnorm(14,15,1)
pnorm(16,15,1)
pnorm(16,15,1) - pnorm(14,15,1)
?ppois
ppois(10, 5)
dpois(10, 5)
dpois(5, 5)
ppois(5, 5)
dpois(10, 15)
ppois(10, 15)
pbinom(0.8, 5, 0.5)
qbinom(0.8, 5, 0.5)
dbinom(0.8, 5, 0.5)
pbinom(0.8, 5, 0.5)
?pbinom
pbinom(4, 5, 0.5)
1-pbinom(4, 5, 0.5)
pbinom(4, 5, 0.5)
pbinom(1, 5, 0.5)
pbinom(1, 5, 0.5)+pbinom(0.8, 5, 0.5)
pbinom(1, 5, 0.5)+pbinom(0.8, 5, 0.5)+pbinom(0.6, 5, 0.5)+pbinom(0.4, 5, 0.5)+pbinom(0.2, 5, 0.5)+pbinom(0.0, 5, 0.5)
qbinom(0.8, 5, 0.5)
qbinom(4, 5, 0.5)
pbinom(4, 5, 0.5)
pbinom(c(1:5), 5, 0.5)
pbinom(c(1:5), 5, 0.5)[3]
1-pbinom(c(1:5), 5, 0.5)[3]
library(swirl)
swirl()
swirl()
swirl()
10/sqrt(100)
2/1
swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
10/sqrt(10)
10/sqrt(100)
swirl()
swirl()
swirl()
2
swirl()
3
pt(2.5, 15, lower.tail=FALSE)
qnorm(0.95)
library(swirl)
swirl()
swirl()
pt(2.5, 15, lower.tail=FALSE)
qnorm(0.95)
library(ggplot2)
library(grid)
swirl()
swirl()
qnorm(0.97)
qnorm(.99)
library(grid)
library(ggplot2)
swirl()
swirl()
2/1
swirl()
swirl()
2/1
(32-30)/(10/4)
15
qt(0.95, 15)
dim
dim(fs)
fs$sheight-fs$fheight
t.test(fs$sheight-fs$fheight)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
mybin
8
8
pnorm(2)
pnorm(2)
pnorm(2,lower.tail=FALSE)
pnorm(2,lower.tail=FALSE)
mybin
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
ppois(9,5,lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <-qnorm(.95)
myplot(28)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
ower.t.test(n = 16, delta = 2 / 4, sd=1, type ="one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type ="one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type ="one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type ="one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt ="one.sided")$n
power.t.test(power = .8, delta = 2 , sd=4, type = "one.sample", alt ="one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample", alt ="one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample", alt ="one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
swirl()
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
head(pValues)
sum(pValues < 0.05
)
sum(pValues < 0.05
)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
24/500
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
sum(1\:6)/6
sum(1:6)/6
print(g2)
print(g2)
head(sh)
length(sh)
nh
nh
median(resampledMedians)
median(resampledMedians)
median(sh)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
1
median(meds)-median(fh)
1
sd(meds)
1
sd(resampledMedians)
1
quantile(resampledMedians,c(.025,.975))
1
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Bdata$count)
range(Cdata$count)
range(Cdata$count)
BCcounts
1
group
testStat
testStat(BCcounts)
1
obs <- testStat(BCcounts,group)
obs
1
mean(Bdata$count)-mean(Cdata$count)
1
sample(group)
1
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
1
mean(perms>obs)
testStat(BCcounts, group)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i)testStat(DEcounts, sample(group)))
setwd("d:\\ds\\rr\pa1")
setwd("d:\\ds\\rr\\pa1")
dataSet <- read.csv("activity.csv")
head(dataSet)
head(dataSet, 30)
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
library("ggplot2")
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
noMissed <- na.omit(dataSet)
dataSet$month <- as.numeric(format(data$date, "%m"))
dataSet$month <- as.numeric(format(dataSet$date, "%m"))
class(dataSet$date)
as.Date.factor (dataSet$date)
dataSet$month <- as.numeric(format(as.Date.factor(dataSet$date), "%m"))
head(dataSet)
noMissed <- na.omit(dataSet)
head(noMissed)
ggplot(noMissed, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
rownames(noMissed)
head(noMissed)
library("knitr")
knit_theme()
knit_theme
totalSteps <- tapply(dataSet$steps, dataSet$date, FUN=sum, na.rm=TRUE)
totalSteps
?qplot
mean(totalSteps, na.rm=T)
names(totalSteps)
?tapply
totalSteps <- tapply(X=dataSet$steps, INDEX=dataSet$date, FUN=sum, na.rm=TRUE)
names(totalSteps)
qplot(totalSteps, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
qplot(totalSteps, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=5000)
qplot(totalSteps, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=5000)
averageStepsPerInterval <- aggregate(x=list(meanSteps=dataSet$steps), by=list(interval=dataSet$interval), FUN=mean, na.rm=TRUE)
maxStepsPerInterval <- which.max(averageStepsPerInterval$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[maxStepsPerInterval,'interval'])
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerInterval[maxStepsPerInterval,'interval'])
timeMostSteps
averageStepsPerInterval
averageStepsPerInterval
averageStepsPerTimeBlock[maxStepsPerInterval,'interval']
averageStepsPerInterval[maxStepsPerInterval,'interval']
maxStepsPerInterval
maxStepsPerInterval$interval[maxStepsPerInterval]
(maxStepsPerInterval$interval)[maxStepsPerInterval]
maxStepsPerInterval$interval
maxStepsPerInterval[104]
averageStepsPerInterval$interval[maxStepsPerInterval]
length(averageStepsPerInterval)
length(averageStepsPerInterval$interval)
288*5/60
ggplot(data=averageStepsPerInterval, aes( y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps")
ggplot(data=averageStepsPerInterval, aes(x=interval/100*12+(interval%100)/5, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps")
averageStepsPerInterval$interval/100*12+(averageStepsPerInterval$interval%100)/5
averageStepsPerInterval$interval/100*12
rownames(averageStepsPerInterval)
as.number(rownames(averageStepsPerInterval))
as.integer(rownames(averageStepsPerInterval))
?plot
